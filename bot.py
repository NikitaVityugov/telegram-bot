import os
import telebot
from telebot import types
from dotenv import load_dotenv
from datetime import datetime

# ==================
#   –ó–ê–ì–†–£–ó–ö–ê –ö–õ–Æ–ß–ï–ô
# ==================
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")
API_KEY = os.getenv("YANDEX_API_KEY")

# –ê–¥–º–∏–Ω—ã (—Å–ø–∏—Å–æ–∫ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
ADMIN_IDS = os.getenv("ADMIN_IDS", "")
ADMIN_IDS = [int(x) for x in ADMIN_IDS.split(",") if x.strip().isdigit()]

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
user_stats = {}


# ==================
#  –û–ë–´–ß–ù–´–ï –ö–û–ú–ê–ù–î–´
# ==================
@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.from_user.id
    user_stats[user_id] = user_stats.get(user_id, 0) + 1
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ü§ñ. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É.")


@bot.message_handler(commands=['help'])
def help_message(message):
    bot.reply_to(message,
                 "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                 "/start ‚Äî –∑–∞–ø—É—Å–∫\n"
                 "/help ‚Äî –ø–æ–º–æ—â—å\n"
                 "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å YandexGPT\n"
                 "/admin ‚Äî –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")


@bot.message_handler(commands=['ping'])
def ping_message(message):
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —ç—Ö–æ-–æ—Ç–≤–µ—Ç
    bot.reply_to(message, "‚úÖ YandexGPT –¥–æ—Å—Ç—É–ø–µ–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç).")


# ==================
#   –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´
# ==================
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id in ADMIN_IDS:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("/stats", "/users", "/broadcast")
        bot.reply_to(message, "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)
    else:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


@bot.message_handler(commands=['stats'])
def stats_message(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    total_users = len(user_stats)
    total_messages = sum(user_stats.values())
    bot.reply_to(
        message,
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"- –°–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
        f"- –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )


@bot.message_handler(commands=['users'])
def list_users(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    if not user_stats:
        bot.reply_to(message, "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    users_list = "\n".join([f"ID: {uid} ‚Äî {count} —Å–æ–æ–±—â–µ–Ω–∏–π" for uid, count in user_stats.items()])
    bot.reply_to(message, f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{users_list}")


@bot.message_handler(commands=['broadcast'])
def broadcast_message(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    text = message.text.replace("/broadcast", "").strip()
    if not text:
        bot.reply_to(message, "‚úçÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/broadcast —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏`", parse_mode="Markdown")
        return
    sent = 0
    for uid in user_stats.keys():
        try:
            bot.send_message(uid, f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{text}")
            sent += 1
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {uid}: {e}")
    bot.reply_to(message, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")


# ==================
#    –≠–•–û-–û–¢–í–ï–¢
# ==================
@bot.message_handler(func=lambda message: True)
def echo_message(message):
    user_id = message.from_user.id
    user_stats[user_id] = user_stats.get(user_id, 0) + 1
    bot.reply_to(message, f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {message.text}")


# ==================
#    –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ==================
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.polling(none_stop=True)
