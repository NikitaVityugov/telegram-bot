import os
import logging
from datetime import datetime

from dotenv import load_dotenv
import telebot
from flask import Flask, request

# =========================
#   –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–ê
# =========================
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
FOLDER_ID = os.getenv("FOLDER_ID")          # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å YandexGPT
API_KEY = os.getenv("API_KEY")              # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å YandexGPT
ADMIN_IDS = os.getenv("ADMIN_IDS", "")
ADMIN_IDS = [int(x) for x in ADMIN_IDS.split(",") if x.strip().isdigit()]

# URL —Ç–≤–æ–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Render (External URL, –∏–∑ Dashboard ‚Üí Settings ‚Üí Environment)
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")    # –ø—Ä–∏–º–µ—Ä: https://telegram-bot-xxxxx.onrender.com
WEBHOOK_PATH = f"/webhook/{TELEGRAM_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}" if WEBHOOK_HOST else None

if not TELEGRAM_TOKEN:
    raise RuntimeError("‚ùå TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# =========================
#     –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# =========================
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")
app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# –ü—Ä–æ—Å—Ç–∞—è ¬´—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
user_stats = {}

# =========================
#       –•–≠–ù–î–õ–ï–†–´
# =========================
@bot.message_handler(commands=["start"])
def cmd_start(message):
    uid = message.from_user.id
    user_stats[uid] = user_stats.get(uid, 0) + 1
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ü§ñ. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É.")

@bot.message_handler(commands=["help"])
def cmd_help(message):
    bot.reply_to(
        message,
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/admin ‚Äî –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
    )

@bot.message_handler(commands=["admin"])
def cmd_admin(message):
    if message.from_user.id in ADMIN_IDS:
        bot.reply_to(message, "‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
    else:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@bot.message_handler(commands=["stats"])
def cmd_stats(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    total_users = len(user_stats)
    total_messages = sum(user_stats.values())
    bot.reply_to(
        message,
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
        f"üïí –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )

@bot.message_handler(func=lambda m: True)
def echo(message):
    uid = message.from_user.id
    user_stats[uid] = user_stats.get(uid, 0) + 1
    bot.reply_to(message, f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {message.text}")

# =========================
#      FLASK –†–û–£–¢–´
# =========================
@app.get("/")
def index():
    return "OK", 200

@app.get("/healthz")
def healthz():
    return "ok", 200

@app.post(WEBHOOK_PATH)
def webhook():
    if request.headers.get("content-type") == "application/json":
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
        return "OK", 200
    return "Unsupported Media Type", 415

# =========================
#       –ó–ê–ü–£–°–ö APP
# =========================
if __name__ == "__main__":
    if not WEBHOOK_URL:
        raise RuntimeError(
            "‚ùå WEBHOOK_HOST –Ω–µ –∑–∞–¥–∞–Ω. –î–æ–±–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Render ‚Üí "
            "Settings ‚Üí Environment ‚Üí WEBHOOK_HOST=https://<—Ç–≤–æ–π-—Å–µ—Ä–≤–∏—Å>.onrender.com"
        )

    logging.info("–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)...")
    bot.remove_webhook()

    logging.info(f"–°—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π webhook: {WEBHOOK_URL}")
    ok = bot.set_webhook(url=WEBHOOK_URL, drop_pending_updates=True)
    logging.info(f"Webhook set: {ok}")

    port = int(os.environ.get("PORT", 5000))
    logging.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º Flask –Ω–∞ 0.0.0.0:{port}")
    app.run(host="0.0.0.0", port=port)
