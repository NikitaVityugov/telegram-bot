import os
import requests
import logging
from collections import defaultdict
from dotenv import load_dotenv
import telebot

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
FOLDER_ID = os.getenv("FOLDER_ID")
API_KEY = os.getenv("API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    filename="bot.log"
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞)
chat_context = defaultdict(list)

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start_message(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ YandexGPT ü§ñ. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã!\n/help ‚Äî –ø–æ–º–æ—â—å.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=["help"])
def help_message(message):
    chat_id = message.chat.id
    help_text = (
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n"
        "/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å YandexGPT\n"
    )
    bot.send_message(chat_id, help_text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å.")

# –ö–æ–º–∞–Ω–¥–∞ /clear
@bot.message_handler(commands=["clear"])
def clear_context(message):
    chat_id = message.chat.id
    chat_context[chat_id].clear()
    bot.send_message(chat_id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω ‚úÖ")
    logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω –¥–ª—è {chat_id}")

# –ö–æ–º–∞–Ω–¥–∞ /ping ‚Äî health-check
@bot.message_handler(commands=["ping"])
def ping(message):
    chat_id = message.chat.id
    try:
        url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        headers = {
            "Authorization": f"Api-Key {API_KEY}",
            "Content-Type": "application/json"
        }
        data = {
            "modelUri": f"gpt://{FOLDER_ID}/yandexgpt-lite",
            "completionOptions": {"stream": False, "temperature": 0.1, "maxTokens": 10},
            "messages": [{"role": "user", "text": "ping"}]
        }
        response = requests.post(url, headers=headers, json=data, timeout=10)
        if response.status_code == 200:
            bot.send_message(chat_id, "‚úÖ YandexGPT –¥–æ—Å—Ç—É–ø–µ–Ω!")
        else:
            bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {response.status_code}")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        chat_context[chat_id].append({"role": "user", "text": message.text})

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π + system prompt)
        messages = [{"role": "system", "text": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."}] + chat_context[chat_id][-5:]

        url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        headers = {
            "Authorization": f"Api-Key {API_KEY}",
            "Content-Type": "application/json"
        }
        data = {
            "modelUri": f"gpt://{FOLDER_ID}/yandexgpt-lite",
            "completionOptions": {"stream": False, "temperature": 0.6, "maxTokens": 500},
            "messages": messages
        }

        response = requests.post(url, headers=headers, json=data, timeout=15)
        if response.status_code == 200:
            result = response.json()
            answer = result["result"]["alternatives"][0]["message"]["text"]
            bot.reply_to(message, answer)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            chat_context[chat_id].append({"role": "assistant", "text": answer})
            logger.info(f"–û—Ç–≤–µ—Ç {chat_id}: {answer[:50]}...")
        else:
            bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            logger.error(f"–û—à–∏–±–∫–∞ API {chat_id}: {response.text}")

    except requests.exceptions.Timeout:
        bot.reply_to(message, "‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç: —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ —É {chat_id}: {str(e)}")

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.polling(none_stop=True)
