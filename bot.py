import os
import json
import telebot
from dotenv import load_dotenv
from flask import Flask, request
import requests
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")
ADMIN_IDS = os.getenv("ADMIN_IDS", "").split(",")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
app = Flask(__name__)

STATS_FILE = "stats.json"

# =======================
# –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
# =======================

def load_stats():
    if os.path.exists(STATS_FILE):
        with open(STATS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"users": {}, "messages": 0}

def save_stats(stats):
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(stats, f, ensure_ascii=False, indent=2)

stats = load_stats()

def update_stats(user_id):
    stats["messages"] += 1
    stats["users"].setdefault(str(user_id), 0)
    stats["users"][str(user_id)] += 1
    save_stats(stats)

# =======================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =======================

def is_admin(user_id):
    return str(user_id) in ADMIN_IDS

def ask_yandex_gpt(prompt):
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 0.6,
            "maxTokens": 200
        },
        "messages": [
            {"role": "user", "text": prompt}
        ]
    }
    resp = requests.post(url, headers=headers, json=data)
    if resp.status_code == 200:
        result = resp.json()
        try:
            return result["result"]["alternatives"][0]["message"]["text"]
        except (KeyError, IndexError):
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ YandexGPT"
    else:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {resp.status_code} - {resp.text}"

# =======================
# –ö–æ–º–∞–Ω–¥—ã
# =======================

@bot.message_handler(commands=["start"])
def start_message(message):
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ü§ñ. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ YandexGPT.")

@bot.message_handler(commands=["help"])
def help_message(message):
    help_text = (
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –∑–∞–ø—É—Å–∫\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å YandexGPT\n"
        "/admin ‚Äî –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
    )
    bot.reply_to(message, help_text)

@bot.message_handler(commands=["ping"])
def ping_message(message):
    test = ask_yandex_gpt("–°–∫–∞–∂–∏ '–ü—Ä–∏–≤–µ—Ç' –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º.")
    bot.reply_to(message, f"‚úÖ YandexGPT –¥–æ—Å—Ç—É–ø–µ–Ω: {test}")

@bot.message_handler(commands=["admin"])
def admin_panel(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    panel = (
        "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/users ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/broadcast ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞"
    )
    bot.reply_to(message, panel)

@bot.message_handler(commands=["stats"])
def show_stats(message):
    if not is_admin(message.from_user.id):
        return
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    reply = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(stats['users'])}\n"
        f"- –°–æ–æ–±—â–µ–Ω–∏–π: {stats['messages']}\n"
        f"- –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {now}"
    )
    bot.reply_to(message, reply)

@bot.message_handler(commands=["users"])
def list_users(message):
    if not is_admin(message.from_user.id):
        return
    reply = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for uid, count in stats["users"].items():
        reply += f"ID: {uid} ‚Äî {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    bot.reply_to(message, reply)

@bot.message_handler(commands=["broadcast"])
def broadcast_message(message):
    if not is_admin(message.from_user.id):
        return
    parts = message.text.split(" ", 1)
    if len(parts) < 2:
        bot.reply_to(message, "‚úçÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
        return
    text = parts[1]
    for uid in stats["users"].keys():
        try:
            bot.send_message(uid, f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞:\n\n{text}")
        except Exception:
            pass
    bot.reply_to(message, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# =======================
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
# =======================

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    update_stats(message.from_user.id)
    reply = ask_yandex_gpt(message.text)
    bot.reply_to(message, reply)

# =======================
# Flask + Webhook
# =======================

@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "ok", 200

@app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{os.getenv('RENDER_EXTERNAL_URL')}/{TELEGRAM_TOKEN}")
    app.run(host="0.0.0.0", port=port)
