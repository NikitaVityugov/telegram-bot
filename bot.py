import os
import requests
import telebot
from telebot import types
from flask import Flask, request
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x]

bot = telebot.TeleBot(TELEGRAM_TOKEN)
app = Flask(__name__)

# ==============================
# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
# ==============================
user_stats = {}
total_messages = 0

# ==============================
# –§—É–Ω–∫—Ü–∏—è: –∑–∞–ø—Ä–æ—Å –∫ YandexGPT
# ==============================
def ask_yandex_gpt(question: str) -> str:
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }

    body = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 0.6,
            "maxTokens": 200
        },
        "messages": [
            {"role": "user", "text": question}
        ]
    }

    try:
        response = requests.post(url, headers=headers, json=body, timeout=30)
        response.raise_for_status()
        result = response.json()
        return result["result"]["alternatives"][0]["message"]["text"]
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ YandexGPT: {e}"

# ==============================
# –ö–æ–º–∞–Ω–¥—ã
# ==============================
@bot.message_handler(commands=["start"])
def start_cmd(message):
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ü§ñ. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ YandexGPT!")

@bot.message_handler(commands=["help"])
def help_cmd(message):
    bot.reply_to(message, "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                          "/start ‚Äî –∑–∞–ø—É—Å–∫\n"
                          "/help ‚Äî –ø–æ–º–æ—â—å\n"
                          "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å YandexGPT\n"
                          "/admin ‚Äî –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")

@bot.message_handler(commands=["ping"])
def ping_cmd(message):
    reply = ask_yandex_gpt("–°–∫–∞–∂–∏ '–Ø–Ω–¥–µ–∫—Å –¥–æ—Å—Ç—É–ø–µ–Ω' –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º")
    bot.reply_to(message, reply)

@bot.message_handler(commands=["admin"])
def admin_cmd(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ.")
        return
    bot.reply_to(message, "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                          "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                          "/users ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                          "/broadcast <—Ç–µ–∫—Å—Ç> ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞")

@bot.message_handler(commands=["stats"])
def stats_cmd(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    global total_messages
    server_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    bot.reply_to(message, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                          f"- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_stats)}\n"
                          f"- –°–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
                          f"- –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {server_time}")

@bot.message_handler(commands=["users"])
def users_cmd(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for user_id, count in user_stats.items():
        text += f"ID: {user_id} ‚Äî {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    bot.reply_to(message, text)

@bot.message_handler(commands=["broadcast"])
def broadcast_cmd(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    parts = message.text.split(" ", 1)
    if len(parts) < 2:
        bot.reply_to(message, "‚úçÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
        return
    text = parts[1]
    for user_id in user_stats.keys():
        try:
            bot.send_message(user_id, f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n{text}")
        except Exception:
            pass
    bot.reply_to(message, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# ==============================
# –û—Ç–≤–µ—Ç—ã –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# ==============================
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global total_messages
    user_id = message.from_user.id
    user_stats[user_id] = user_stats.get(user_id, 0) + 1
    total_messages += 1

    reply = ask_yandex_gpt(message.text)
    bot.reply_to(message, reply)

# ==============================
# Flask (–¥–ª—è Render)
# ==============================
@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

# ==============================
# –ó–∞–ø—É—Å–∫
# ==============================
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TELEGRAM_TOKEN}")
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
